@{
    var keys = ViewBag.Keys as string[];
    if (keys == null || keys.Length == 0)
    {
        keys = new string[] {
            "main-entrance",
            "side-door",
            "rear-exit",
            "garage-access",
            "staff-entry",
            "vip-lounge",
            "storage-room",
            "emergency-exit",
            "roof-access"
        };
    }
}
<!-- aggiunto: stesso font e stili principali di Index per background, padding e bordi -->
<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&display=swap" rel="stylesheet">
<style>
    /* match Index: font, background, colori, padding generale */
    body {
        font-family: 'Nunito', system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        background: linear-gradient(90deg, #eef3f7 0%, #f7fbfd 100%);
        color: #1f2937;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
    }

    .container-fluid {
        padding-top: 1.6rem;
        padding-bottom: 1.6rem;
        width: 95%;
    }

    /* carte e contenitori: bordi arrotondati e ombra morbida (come Index) */
    .card {
        border-radius: 12px;
        background: linear-gradient(90deg, #ffffff 0%, #fbfdff 100%);
        box-shadow: 0 8px 20px rgba(15, 23, 42, 0.06);
        border: 1px solid rgba(15, 23, 42, 0.04);
    }
    .card .card-body { border-radius: 10px; }

    /* regole specifiche QR (mantienile ma coerenti con il nuovo design) */
    .qr-image-wrap {
        width: 220px;
        height: 220px;
        display: inline-block;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid rgba(0,0,0,0.06);
        background: #fff;
        padding: 8px;
    }
    .qr-image { width: 100%; height: 100%; object-fit: contain; display:block; }

    .btn-group .btn { border-radius: 8px; }

    @* @media (max-width: 576px) {
        .qr-image-wrap { width: 160px; height:160px; }
    } *@
</style>

@section scripts {
    <script>
        (function(){
            document.querySelectorAll('.copy-link').forEach(btn => {
                btn.addEventListener('click', async (e) => {
                    const url = btn.getAttribute('data-url');
                    try {
                        await navigator.clipboard.writeText(window.location.origin + url);
                        btn.innerText = 'Copiato';
                        setTimeout(() => btn.innerText = 'Copia link', 1400);
                    } catch (err) {
                        console.warn('Clipboard failed', err);
                        alert('Copia non disponibile. URL: ' + (window.location.origin + url));
                    }
                });
            });

            // debug-link: fetch the debug page, extract the URL and redirect to it
            document.querySelectorAll('.debug-link').forEach(link => {
                link.addEventListener('click', async (e) => {
                    e.preventDefault();
                    const dbg = link.getAttribute('data-url');
                    if (!dbg) return;
                    try {
                        const res = await fetch(dbg, { credentials: 'same-origin' });
                        const txt = await res.text();
                        // try to find first http(s) URL in the returned content
                        const m = txt.match(/https?:\/\/[^\s"'<>]+/i);
                        if (m && m[0]) {
                            // if the URL is relative to this origin, it's fine; otherwise open directly
                            window.location.href = m[0];
                        } else {
                            alert('URL di debug non trovato nella risposta.');
                        }
                    } catch (err) {
                        console.error('Redirect debug failed', err);
                        alert('Errore durante il redirect di debug.');
                    }
                });
            });
        })();
    </script>
}

<div class="container-fluid py-4">
    <div class="d-flex align-items-center mb-3">
        <div>
            <h2 class="h4 mb-0 fw-bold">üåê QR Manager</h2>
            <div class="text-muted small">Anteprima e azioni rapide per i codici QR</div>
        </div>
    </div>

    <div class="row g-3">
        @foreach(var k in keys)
        {
            var imgUrl = $"/qr/generate?key={k}";
            var dbgUrl = $"/qr/generate?key={k}&debug=true";
            <div class="col-12 col-sm-6 col-md-4">
                <div class="card h-100 shadow-sm">
                    <div class="card-body d-flex flex-column align-items-center text-center">
                        <div class="fw-semibold mb-1 text-truncate" style="max-width:100%;">@k</div>
                        <div class="qr-image-wrap mb-3">
                            <a href="@imgUrl" target="_blank" title="Open image">
                                <img src="@imgUrl" alt="QR @k" class="img-fluid qr-image" />
                            </a>
                        </div>
                        <div class="mb-2"><a href="#" class="small text-decoration-none debug-link" data-url="@dbgUrl">üîç Apri</a></div>
                        <div class="w-100 mt-auto">
                            <div class="btn-group w-100" role="group" aria-label="QR actions">
                                <a class="btn btn-outline-primary btn-sm" href="@imgUrl" target="_blank">Immagine</a>
                                <button type="button" class="btn btn-outline-secondary btn-sm copy-link" data-url="@imgUrl">Copia link</button>
                                <a class="btn btn-success btn-sm" href="@imgUrl" download="@($"{k}.png")">Scarica</a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>