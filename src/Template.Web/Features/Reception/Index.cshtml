@{
    Layout = "_Layout";
}
<!-- Aggiunto font e stili per rendere interfaccia meno "bianca" e pi√π arrotondata -->
<link href="https://fonts.googleapis.com/css2?family=Nunito:wght@300;400;600;700&display=swap" rel="stylesheet">
<style>
    /* globale: font pi√π rotondo e sfondo meno bianco */
    body {
        font-family: 'Nunito', system-ui, -apple-system, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
        background: linear-gradient(180deg, #eef3f7 0%, #f7fbfd 100%);
        color: #1f2937;
        -webkit-font-smoothing: antialiased;
        text-rendering: optimizeLegibility;
    }

    /* carte e contenitori: bordi arrotondati e ombra morbida */
    .card {
        border-radius: 12px;
        background: linear-gradient(180deg, #ffffff 0%, #fbfdff 100%);
        box-shadow: 0 8px 20px rgba(15, 23, 42, 0.06);
        border: 1px solid rgba(15, 23, 42, 0.04);
    }
    .card .card-body { border-radius: 10px; }

    /* input, select e bottoni pi√π arrotondati per look "morbido" */
    .form-control,
    .form-check-input {
        border-radius: 10px;
    }
    .form-control:focus {
        box-shadow: 0 4px 16px rgba(59,130,246,0.06);
        border-color: rgba(59,130,246,0.35);
    }
    .btn {
        border-radius: 10px;
        transition: transform .06s ease, box-shadow .06s ease;
    }
    .btn-sm { padding: .35rem .6rem; }

    /* evidenza riga e selezione pi√π morbida */
    #visits tbody tr:hover { background: rgba(99,102,241,0.03); }
    tr.selected { background: linear-gradient(90deg, rgba(99,102,241,0.08), rgba(255,255,255,0)); }

    /* testate e celle meno "taglienti" */
    .table thead th {
        background: transparent;
        color: #374151;
        font-weight: 600;
        letter-spacing: 0.2px;
    }
    #visits td { vertical-align: middle; }

    /* badge e status pi√π arrotondati e tonali */
    #status.badge {
        border-radius: 12px;
        padding: .45rem .6rem;
    }
    .badge.bg-success { background: linear-gradient(180deg,#10b981,#059669); color: #fff; }
    .badge.bg-warning { background: linear-gradient(180deg,#f59e0b,#d97706); color: #fff; }

    /* footer e testi secondari pi√π morbidi */
    .card-footer { background: transparent; border-top: none; color: #6b7280; }
    .text-muted { color: #6b7280 !important; }

    /* piccoli aggiustamenti paddings per aria */
    .container-fluid {
        padding-top: 1.6rem;
        padding-bottom: 1.6rem;
        width: 95%;
    }
</style>

<div class="container-fluid py-4">
    <div class="d-flex align-items-start gap-3 mb-3">
        <div>
            <h1 class="h3 mb-1 fw-bold">üõéÔ∏è Reception Live</h1>
            <p class="text-muted mb-0">Monitoraggio check-in/check-out in tempo reale con SignalR</p>
        </div>
        <div class="ms-auto d-flex align-items-center gap-2">
            <span id="status" class="badge bg-warning text-dark">Connessione...</span>
        </div>
    </div>

    <div class="row gx-4">
        <!-- Main column -->
        <div class="col-lg-9">
            <!-- Stats -->
            <div class="row mb-3 g-3">
                <div class="col-sm-4">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center">
                                <div>
                                    <small class="text-muted">Presenti ora</small>
                                    <div id="presentNow" class="h4 mb-0">0</div>
                                </div>
                                <div class="text-success fs-3"><i class="fas fa-user-check"></i></div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <small class="text-muted">Ultimo check‚Äëin</small>
                            <div id="lastCheckin" class="h6 mb-0">-</div>
                        </div>
                    </div>
                </div>
                <div class="col-sm-4">
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <small class="text-muted">Totale registri</small>
                            <div id="totalRecords" class="h6 mb-0">0</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Filters -->
            <div class="card mb-3 shadow-sm">
                <div class="card-body">
                    <div class="row gy-2 gx-2 align-items-center">
                        <div class="col-md-5">
                            <input id="filterSearch" class="form-control" placeholder="Cerca email, nome, cognome, QR..." />
                        </div>
                        <div class="col-auto">
                            <input id="filterStart" type="date" class="form-control" />
                        </div>
                        <div class="col-auto">
                            <input id="filterEnd" type="date" class="form-control" />
                        </div>
                        <div class="col-auto d-flex align-items-center">
                            <input id="filterPresent" class="form-check-input me-1" type="checkbox" />
                            <label class="form-check-label mb-0">Solo presenti</label>
                        </div>
                        <div class="col-auto">
                            <button id="applyFilters" class="btn btn-outline-secondary btn-sm">Applica</button>
                            <button id="clearFilters" class="btn btn-outline-secondary btn-sm">Reset</button>
                        </div>
                        <div class="col text-end">
                            <button id="exportBtn" class="btn btn-success btn-sm">Esporta Excel</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Table -->
            <div class="card shadow-sm">
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table id="visits" class="table table-hover mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th style="min-width:220px;">#</th>
                                    <th>QR</th>
                                    <th>Email</th>
                                    <th>Nome</th>
                                    <th>Cognome</th>
                                    <th>Entrata</th>
                                    <th>Uscita</th>
                                    <th style="width:120px;">Azioni</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- rows populated by JS -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="card-footer text-muted small">
                    <span id="visitCount">Visitatori attualmente presenti: 0</span>
                </div>
            </div>
        </div>

        <!-- Sidebar -->
        <div class="col-lg-3">
            <div class="card shadow-sm mb-3">
                <div class="card-body">
                    <h6 class="card-title">Dettaglio visitatore</h6>
                    <div id="detailEmpty" class="text-muted">Seleziona una entry per vedere i dettagli</div>
                    <div id="detailPane" class="d-none">
                        <div class="mb-2"><strong id="detailName">-</strong></div>
                        <div class="mb-1"><small class="text-muted">Email</small><div id="detailEmail">-</div></div>
                        <div class="mb-1"><small class="text-muted">QR</small><div id="detailQr">-</div></div>
                        <div class="mb-1"><small class="text-muted">Entrata</small><div id="detailIn">-</div></div>
                        <div class="mb-1"><small class="text-muted">Uscita</small><div id="detailOut">-</div></div>
                        <div class="mt-3">
                            <button id="detailCheckoutBtn" class="btn btn-danger btn-sm">Segna uscita</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card shadow-sm">
                <div class="card-body">
                    <h6 class="card-title">Azioni rapide</h6>
                    <button id="exportBtn2" class="btn btn-success btn-sm w-100 mb-2">Esporta Excel</button>
                    <button id="resetView" class="btn btn-outline-secondary btn-sm w-100 mb-2">Reset filtri</button>
                    <a href="http://localhost:5178/qr/preview" target="_blank" rel="noopener" role="button"
                       class="btn btn-outline-primary btn-sm w-100 text-decoration-none">QR Manager</a>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <style>
        /* small visual helpers */
        .card .card-body small { color: #6b7280; }
        tr.selected { background: linear-gradient(90deg, rgba(99,102,241,0.06), rgba(255,255,255,0)); }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.0/dist/browser/signalr.min.js"></script>
    <script>
        // elements
        const tbody = document.querySelector('#visits tbody');
        const statusEl = document.getElementById('status');
        const presentNowEl = document.getElementById('presentNow');
        const lastCheckinEl = document.getElementById('lastCheckin');
        const totalRecordsEl = document.getElementById('totalRecords');
        const visitCountEl = document.getElementById('visitCount');
        const detailPane = document.getElementById('detailPane');
        const detailEmpty = document.getElementById('detailEmpty');
        const detailName = document.getElementById('detailName');
        const detailEmail = document.getElementById('detailEmail');
        const detailQr = document.getElementById('detailQr');
        const detailIn = document.getElementById('detailIn');
        const detailOut = document.getElementById('detailOut');
        const detailCheckoutBtn = document.getElementById('detailCheckoutBtn');

        // filters
        const filterSearch = document.getElementById('filterSearch');
        const filterStart = document.getElementById('filterStart');
        const filterEnd = document.getElementById('filterEnd');
        const filterPresent = document.getElementById('filterPresent');
        const applyFiltersBtn = document.getElementById('applyFilters');
        const clearFiltersBtn = document.getElementById('clearFilters');
        const exportBtn = document.getElementById('exportBtn');
        const exportBtn2 = document.getElementById('exportBtn2');

        let selectedId = null;

        // SignalR
        const conn = new signalR.HubConnectionBuilder().withUrl('/templateHub').build();
        conn.on('NewVisit', v => addOrUpdateRow(v));
        conn.on('UpdateVisit', v => addOrUpdateRow(v));

        conn.start().then(() => {
            statusEl.classList.remove('bg-warning','text-dark');
            statusEl.classList.add('bg-success','text-white');
            statusEl.innerText = 'üü¢ Connesso';
        }).catch(e => {
            statusEl.classList.remove('bg-warning');
            statusEl.classList.add('bg-danger','text-white');
            statusEl.innerText = 'üî¥ Errore di connessione';
            console.warn(e);
        });

        function val(o,a,b){ return (o&& (o[a] ?? o[b])) ?? ''; }
        function fmt(d){ if(!d) return ''; const dt=new Date(d); return isNaN(dt.getTime())? '': dt.toLocaleString(); }

        function buildQueryParams() {
            const params = new URLSearchParams();
            const q = filterSearch.value.trim();
            if (q) params.set('q', q);
            if (filterStart.value) params.set('start', filterStart.value);
            if (filterEnd.value) params.set('end', filterEnd.value);
            if (filterPresent.checked) params.set('presentOnly', 'true');
            return params.toString();
        }

        applyFiltersBtn?.addEventListener('click', () => loadExistingVisits());
        clearFiltersBtn?.addEventListener('click', () => {
            filterSearch.value=''; filterStart.value=''; filterEnd.value=''; filterPresent.checked=false;
            loadExistingVisits();
        });
        exportBtn?.addEventListener('click', () => { const qs=buildQueryParams(); window.location = '/api/visits/export' + (qs? '?' + qs : ''); });
        exportBtn2?.addEventListener('click', () => { const qs=buildQueryParams(); window.location = '/api/visits/export' + (qs? '?' + qs : ''); });

        function rowClickHandler(id, v){
            selectedId = id;
            document.querySelectorAll('#visits tbody tr').forEach(tr => tr.classList.remove('selected'));
            const tr = document.getElementById('v-' + id);
            if(tr) tr.classList.add('selected');

            detailEmpty.classList.add('d-none');
            detailPane.classList.remove('d-none');
            detailName.innerText = `${val(v,'FirstName','firstName')} ${val(v,'LastName','lastName')}`;
            detailEmail.innerText = val(v,'Email','email');
            detailQr.innerText = val(v,'QrKey','qrKey');
            detailIn.innerText = fmt(val(v,'CheckInTime','checkInTime'));
            detailOut.innerText = fmt(val(v,'CheckOutTime','checkOutTime'));

            // set checkout button state
            if (val(v,'CheckOutTime','checkOutTime')) {
                detailCheckoutBtn.disabled = true;
                detailCheckoutBtn.innerText = 'Uscita registrata';
            } else {
                detailCheckoutBtn.disabled = false;
                detailCheckoutBtn.innerText = 'Segna uscita';
                detailCheckoutBtn.onclick = () => checkoutVisit(id, detailCheckoutBtn);
            }
        }

        function addOrUpdateRow(v) {
            if (!v) return;
            const id = val(v,'Id','id') || val(v,'id','Id');
            if(!id) return;
            let tr = document.getElementById('v-' + id);
            const isNew = !tr;
            if (isNew) {
                tr = document.createElement('tr');
                tr.id = 'v-' + id;
                tbody.prepend(tr);
            }
            const QrKey = val(v,'QrKey','qrKey');
            const Email = val(v,'Email','email');
            const FirstName = val(v,'FirstName','firstName');
            const LastName = val(v,'LastName','lastName');
            const CheckInTime = val(v,'CheckInTime','checkInTime');
            const CheckOutTime = val(v,'CheckOutTime','checkOutTime');

            tr.innerHTML = `
                <td style="min-width:220px">${id}</td>
                <td>${QrKey}</td>
                <td>${Email}</td>
                <td>${FirstName}</td>
                <td>${LastName}</td>
                <td>${fmt(CheckInTime)}</td>
                <td>${fmt(CheckOutTime)}</td>
                <td>
                    ${ CheckOutTime ? 
                        '<button class="btn btn-sm btn-outline-secondary" disabled>Uscito</button>' :
                        `<button class="btn btn-sm btn-danger" onclick="checkoutVisit('${id}', this)">Segna uscita</button>`
                    }
                </td>
            `;

            // bind row click to show details (use current v snapshot)
            tr.onclick = () => rowClickHandler(id, v);

            updateStats();
        }

        async function checkoutVisit(id, btnEl) {
            try {
                btnEl.disabled = true;
                btnEl.innerText = '‚è≥';
                const res = await fetch(`/api/visits/${id}/checkout`, { method: 'POST', credentials: 'same-origin' });
                if (!res.ok) {
                    console.warn('Checkout failed', res.status);
                    btnEl.disabled = false;
                    return;
                }
                const updated = await res.json();
                addOrUpdateRow(updated);
                if(selectedId === id) rowClickHandler(id, updated);
            } catch (e) {
                console.error(e);
            }
        }

        async function loadExistingVisits() {
            try {
                const qs = buildQueryParams();
                const url = '/api/visits' + (qs ? '?' + qs : '');
                console.debug('[Reception] loadExistingVisits ->', url);
                const res = await fetch(url, { credentials: 'same-origin' });
                if (!res.ok) {
                    console.warn('Failed to load persisted visits', res.status);
                    return;
                }
                const arr = await res.json();
                tbody.innerHTML = '';
                if (Array.isArray(arr)) {
                    for (let i = 0; i < arr.length; i++) addOrUpdateRow(arr[i]);
                }
                updateStats();
            } catch (e) {
                console.error(e);
            }
        }

        function updateStats() {
            const rows = Array.from(document.querySelectorAll('#visits tbody tr'));
            totalRecordsEl.innerText = rows.length;
            const present = rows.reduce((acc, tr) => {
                const usc = tr.querySelectorAll('td')[6]?.innerText?.trim();
                return acc + (usc ? 0 : 1);
            }, 0);
            presentNowEl.innerText = present;
            visitCountEl.innerText = `Visitatori attualmente presenti: ${present}`;
            // last checkin (first row)
            const firstRow = rows[0];
            if (firstRow) {
                const lastIn = firstRow.querySelectorAll('td')[5]?.innerText || '';
                lastCheckinEl.innerText = lastIn;
            } else {
                lastCheckinEl.innerText = '-';
            }
            document.getElementById('detailEmpty').classList.toggle('d-none', rows.length > 0 && selectedId);
        }

        // init load
        loadExistingVisits();
    </script>
}