@{
}
<div class="container">
    <h1 class="page-title">üõéÔ∏è Reception Live</h1>
    <p class="lead">Monitoraggio check-in/check-out in tempo reale con SignalR</p>

    <div id="status" class="connection-status connecting">üü° Connessione in corso...</div>
    <p id="visitCount" class="visit-count">Visitatori attualmente presenti: 0</p>

    <div class="card">
        <div class="card-header">Registro visitatori</div>
        <div class="card-body table-responsive">
            <div class="d-flex align-items-center mb-3 gap-2">
                <input id="filterSearch" class="form-control" placeholder="Cerca email, nome, cognome, QR..." style="max-width:380px" />
                <input id="filterStart" type="date" class="form-control" style="max-width:160px" title="Data inizio" />
                <input id="filterEnd" type="date" class="form-control" style="max-width:160px" title="Data fine" />
                <label class="d-flex align-items-center gap-1" style="margin:0 8px;">
                    <input id="filterPresent" type="checkbox" /> Solo presenti
                </label>
                <button id="applyFilters" class="btn btn-outline-secondary">Applica</button>
                <button id="clearFilters" class="btn btn-outline-secondary">Reset</button>
                <button id="exportBtn" class="btn btn-success ms-auto">Esporta Excel</button>
            </div>

            <table id="visits" class="table table-striped table-hover">
                <thead>
                    <tr>
                        <th>#</th>
                        <th>QR</th>
                        <th>Email</th>
                        <th>Nome</th>
                        <th>Cognome</th>
                        <th>Entrata</th>
                        <th>Uscita</th>
                        <th>Azioni</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- rows popolati da JS -->
                </tbody>
            </table>
            <div id="emptyState" class="empty-table-message" hidden>Nessuna visita registrata</div>
        </div>
    </div>
</div>

@section scripts {
    <style>
        /* Layout & Responsiveness */
        .container {
            max-width: 1800px;
            margin: 2rem auto;
            padding: 0 1rem;
        }

        /* Typography */
        .page-title {
            font-size: 1.75rem;
            font-weight: 600;
            margin-top: 1rem;
        }

        .lead {
            font-size: 1rem;
            color: #666;
            margin-bottom: 1rem;
        }

        /* Status */
        .connection-status {
            margin-bottom: 1rem;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-weight: 600;
            max-width: fit-content;
        }

        .connecting {
            background: #fff3cd;
            color: #856404;
        }
        
        .connected {
            background: #d4edda;
            color: #155724;
        }

        .error {
            background: #f8d7da;
            color: #721c24;
        }

        .visit-count {
            font-weight: 500;
            margin-bottom: 1rem;
            color: #444;
        }

        /* Table Styles */
        .card {
            background: #fff;
            border: 1px solid #ddd;
            border-radius: 6px;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
            overflow-x: auto;
        }

        .card-header {
            background: #f7f7f7;
            padding: 0.75rem 1rem;
            font-weight: 600;
            border-bottom: 1px solid #ddd;
        }

        .card-body {
            padding: 1rem;
        }

        .table {
            width: 100%;
            border-collapse: separate;
            border-spacing: 0;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 1px 4px rgba(0, 0, 0, 0.08);
            background-color: #fff;
            font-family: 'Inter', sans-serif;
            font-size: 0.875rem;
            }

            .table thead {
            background-color: #f9fafb;
            text-align: left;
            color: #6b7280;
            font-weight: 600;
            font-size: 0.85rem;
            }

            .table th, .table td {
            padding: 1rem;
            border-bottom: 1px solid #e5e7eb;
            white-space: nowrap;
            vertical-align: middle;
            }

            .table th:first-child,
            .table td:first-child {
            padding-left: 1.25rem;
            }

            .table th:last-child,
            .table td:last-child {
            padding-right: 1.25rem;
            }

            .table tbody tr:hover {
            background-color: #f3f4f6;
            }

            /* Action button styling */
            .btn {
            font-size: 0.75rem;
            padding: 0.4rem 0.8rem;
            border-radius: 6px;
            font-weight: 500;
            transition: all 0.2s ease-in-out;
            }

            .btn-success {
            background-color: #10b981;
            color: white;
            border: none;
            }

            .btn-success:hover {
            background-color: #059669;
            }

            .btn-outline-secondary {
            background-color: transparent;
            border: 1px solid #d1d5db;
            color: #6b7280;
            }

            .btn-outline-secondary:disabled {
            background-color: #f3f4f6;
            color: #9ca3af;
            border-color: #e5e7eb;
        }

        table th {
            white-space: nowrap;
            font-size: 0.875rem;
            font-weight: 600;
            color: #444;
        }

        table td {
            font-size: 0.875rem;
        }

        .empty-table-message {
            text-align: center;
            font-style: italic;
            color: #888;
            margin-top: 1rem;
        }

        /* Responsive adjustments */
        @* @media (max-width: 600px) {
            .page-title {
                font-size: 1.4rem;
            }

            table th,
            table td {
                font-size: 0.75rem;
                padding: 0.5rem;
            }

            .card-body {
                padding: 0.5rem;
            }
        } *@
    </style>

    <script src="https://cdn.jsdelivr.net/npm/@@microsoft/signalr@8.0.0/dist/browser/signalr.min.js"></script>
    <script>
        const statusEl = document.getElementById('status');
        const tbody = document.querySelector('#visits tbody');
        const emptyState = document.getElementById('emptyState');
        const visitCountEl = document.getElementById('visitCount');

        const conn = new signalR.HubConnectionBuilder().withUrl('/templateHub').build();

        conn.on('NewVisit', v => addOrUpdateRow(v));
        conn.on('UpdateVisit', v => addOrUpdateRow(v));

        loadExistingVisits();

        conn.start().then(() => {
            statusEl.innerText = 'üü¢ Connesso';
            statusEl.classList.remove('connecting');
            statusEl.classList.add('connected');
            conn.invoke('JoinGroup', '00000000-0000-0000-0000-000000000000');
        }).catch(e => {
            statusEl.innerText = 'üî¥ Errore di connessione: ' + e;
            statusEl.classList.remove('connecting');
            statusEl.classList.add('error');
        });

        function val(obj, a, b) {
            return obj[a] ?? obj[b] ?? '';
        }

        function fmt(d) {
            if (!d) return '';
            try {
                const dt = new Date(d);
                return isNaN(dt.getTime()) ? '' : dt.toLocaleString();
            } catch { return ''; }
        }

        function checkoutButton(id, checkedOut) {
            return checkedOut
                ? '<button class="btn btn-sm btn-outline-secondary" disabled title="Uscita registrata">Uscito</button>'
                : `<button class="btn btn-sm btn-danger" onclick="checkoutVisit('${id}', this)">Checkout</button>`;
        }

        function addOrUpdateRow(v) {
            const id = val(v, 'Id', 'id') || val(v, 'id', 'Id');
            let tr = document.getElementById('v-' + id);
            const isNew = !tr;

            if (isNew) {
                tr = document.createElement('tr');
                tr.id = 'v-' + id;
                tbody.prepend(tr);
            }

            const QrKey = val(v, 'QrKey', 'qrKey');
            const Email = val(v, 'Email', 'email');
            const FirstName = val(v, 'FirstName', 'firstName');
            const LastName = val(v, 'LastName', 'lastName');
            const CheckInTime = val(v, 'CheckInTime', 'checkInTime');
            const CheckOutTime = val(v, 'CheckOutTime', 'checkOutTime');

            tr.innerHTML = `
                <td>${id}</td>
                <td>${QrKey}</td>
                <td>${Email}</td>
                <td>${FirstName}</td>
                <td>${LastName}</td>
                <td>${fmt(CheckInTime)}</td>
                <td>${fmt(CheckOutTime)}</td>
                <td>${checkoutButton(id, CheckOutTime)}</td>
            `;

            updateVisitCount();
            updateEmptyState();
        }

        async function checkoutVisit(id, btnEl) {
            try {
                btnEl.disabled = true;
                btnEl.innerText = '‚è≥ Uscita...';
                const res = await fetch('/api/visits/' + id + '/checkout', {
                    method: 'POST',
                    credentials: 'same-origin'
                });
                if (!res.ok) {
                    console.warn('Checkout fallito', res.status);
                    btnEl.disabled = false;
                    btnEl.innerText = '‚¨Ö Uscita';
                    return;
                }
                const updated = await res.json();
                addOrUpdateRow(updated);
            } catch (e) {
                console.error('Checkout error', e);
            }
        }

        async function loadExistingVisits() {
            try {
                const res = await fetch('/api/visits', { credentials: 'same-origin' });
                if (!res.ok) return;

                const arr = await res.json();
                if (Array.isArray(arr)) {
                    for (let i = arr.length - 1; i >= 0; i--) {
                        addOrUpdateRow(arr[i]);
                    }
                }
            } catch (e) {
                console.error('Errore caricamento visite', e);
            }
        }

        @* function updateVisitCount() {
            const count = document.querySelectorAll('#visits tbody tr').length;
            visitCountEl.innerText = `Visitatori attualmente presenti: ${count}`;
        } *@

        function updateEmptyState() {
            const hasRows = document.querySelectorAll('#visits tbody tr').length > 0;
            emptyState.hidden = hasRows;
        }

        function updateVisitCount() {
            // conta solo righe con uscita non impostata (presenza reale)
            const rows = Array.from(document.querySelectorAll('#visits tbody tr'));
            const presentCount = rows.reduce((acc, tr) => {
                const uscita = tr.querySelectorAll('td')[6]?.innerText?.trim();
                return acc + (uscita ? 0 : 1);
            }, 0);
            visitCountEl.innerText = `Visitatori attualmente presenti: ${presentCount}`;
        }
    </script>
}
